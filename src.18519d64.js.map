{"version":3,"sources":["src/index.js"],"names":["arr4","arr5","arr6","console","log"],"mappings":";AAsKoB,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAHpB,IAAMA,EAAO,CAAC,GAAI,IACZC,EAAO,CAAC,GAAI,IACZC,EAAWF,GAAAA,OAAAA,IACjBG,EAAAA,SAAQC,IAAOF,MAAAA,EAAAA,EAAAA","file":"src.18519d64.js","sourceRoot":"..","sourcesContent":["/**\n * const、letの変数宣言\n */\n\n//  /**\n//   * 従来の書き方\n//   */\n//  var val1 = \"var変数\";\n//  console.log(val1);\n\n//  /**\n//   * var変数は上書き可能\n//   */\n//  val1 = \"var変数は上書き\";\n//  console.log(val1);\n\n// //  var変数は再宣言可能\n// var val1 = \"var変数を再宣言\";\n// console.log(val1);\n\n// // 2015年以降の書き方\n// let val2 = \"let変数\";\n// console.log(val2);\n\n// // letも上書き可能\n// val2 = \"let変数を上書き\";\n// console.log(val2);\n\n// // letは再宣言不可能！！\n// let val2 = \"let変数を再宣言\";\n\n// // 変数が上書きされるときはletを使用\n\n// // constは上書きも再宣言も不可能\n// const val3 = \"const変数\";\n// console.log(val3);\n\n// // constが上書きできないことを確認\n// // val3 = \"const上書き\";\n\n// // constは再宣言できないことを確認\n// const val3 = \"const再宣言\";\n\n// objectを定義\n// // オブジェクトの場合はconstであっても変数を上書きできる\n\n// const val4 = {\n//   name: \"ahi\",\n//   age: 26,\n// };\n\n// val4.name = \"あひ\";\n\n// // constで定義したオブジェクトはプロパティの変更追加が可能\n// val4.address = \"北海道\";\n// console.log(val4);\n\n// // 配列の場合もconstで変数の変更を確認\n// const val5 = [\"dog\", \"cat\"];\n// console.log(val5);\n\n// val5[0] = \"bird\";\n\n// val5.push(\"monkey\");\n\n// // reactの開発ではほとんど\"const\"を使って定義\n// // 変更が必要なものは\"state\"を使う\n\n/**\n * テンプレート文字列　ES2015で追加された昨日\n * 文字列の中にjsの変数を埋め込めるようになった\n */\n\n//  const name = \"きたわき\";\n//  const age = 26;\n// //  「私の名前はきたわきです。年齢は26歳です」\n\n// // // 従来の方法\n// const message1 = \"私の名前は\" + name + \"です。年齢は\" + age + \"です。\";\n// console.log(message1);\n\n// // ES2015以降　テンプレート文字列を使用\n// const message2 = `私の名前は${name}です。年齢は${age}です。`;\n// console.log(message2);\n\n/**\n * アロー関数\n */\n\n//従来の関数\n// //  例、渡したstringの引数をそのまま返す\n//  function func1(str) {\n//    return str;\n// //  }\n// const func1 = function(str){\n//   return str;\n// }\n//  console.log(func1(\"ファンク１です\"));\n\n// // ES2015以降の機能 アロー関数\n// const func2 = (str) => str;\n\n// console.log(func2(\"ファンク2です\"));\n\n// const func3 = (num1, num2) => {\n//   return num1+num2;\n// }\n\n// console.log(func3(10, 20));\n\n/**\n * 分割代入\n */\n// const myProfile = {\n//   name: \"けんし\",\n//   age: 26,\n// }\n\n// // const message1 = `名前は${myProfile.name}です。年齢は${myProfile.age}です。`;\n// // console.log(message1);\n\n// const { name, age } = myProfile;\n\n// const message2 = `名前は${name}です。年齢は${age}です。`;\n// console.log(message2);\n\n// const myProfile = ['けんし', '26'];\n\n// const message3 = `名前は${myProfile[0]}です。年齢は${myProfile[1]}です。`;\n// console.log(message3);\n\n// const [name, age] = myProfile;\n// const message4 = `名前は${name}です。年齢は${age}です。`;\n// console.log(message4);\n\n/**\n * デフォルト値\n//  */\n// const sayHello =(name=\"ゲスト\")=> console.log(`こんにちは${name}さん`);\n// sayHello(\"けんし\");\n\n/**\n * スプレッド構文...\n */\n// 配列の展開\n// const arr1 = [1,2];\n// console.log(arr1);\n// console.log(...arr1);\n\n// const sumFunc = (num1, num2) => console.log(num1+num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);//配列の中身を順番に処理する\n\n// まとめる\n// const arr2 = [1,2,3,4,5];\n// const [num1, num2, ...arr3] = arr2;//分割代入\n\n// console.log(num1);\n\n// console.log(num2);\n// console.log(...arr3);\n\n// 配列のコピーや結合\nconst arr4 = [10, 20];\nconst arr5 = [30, 40];\nconst arr6 = [...arr4]; //配列のコピー\nconsole.log(...arr6);\n"]}